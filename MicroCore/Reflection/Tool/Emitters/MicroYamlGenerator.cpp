/**
 *
 *  __  __ _             ___
 * |  \/  (_)__ _ _ ___ / __|___ _ _ ___
 * | |\/| | / _| '_/ _ \ (__/ _ \ '_/ -_)
 * |_|  |_|_\__|_| \___/\___\___/_| \___|
 *
 * MIT License
 *
 * Copyright (c) 2024 Alves Quentin
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 **/

#include "__micro_core_pch.h"

////////////////////////////////////////////////////////////////////////////////////////////
//		===	PUBLIC ===
////////////////////////////////////////////////////////////////////////////////////////////
MicroYamlGenerator::MicroYamlGenerator( ) 
	: MicroReflectEmitter{ }
{ }

void MicroYamlGenerator::PreRun( MicroReflectSourceDeclaration& declaration ) { }

void MicroYamlGenerator::Run( const MicroReflectSourceDeclaration& declaration ) {
	auto dst_path = declaration.Source;

	dst_path.replace_extension( ".yaml.h" );

	auto file = std::ofstream{ dst_path };

	file << "/**\n";
	file << " *\n";
	file << " *  __  __ _            ___      __ _        _\n";
	file << " * |  \\/  (_)__ _ _ ___| _ \\___ / _| |___ __| |_\n";
	file << " * | |\\/| | / _| '_/ _ \\   / -_)  _| / -_) _|  _|\n";
	file << " * |_|  |_|_\\__|_| \\___/_|_\\___|_| |_\\___\\__|\\__|\n";
	file << " *\n";
	file << " * Do not edit or delete.\n";
	file << " * This file was automatically generated by MicroReflectGenerator.\n";
	file << " * Contain reflection function implementation for types found in\n";
	file << " * source file : " << declaration.Source << "\n";
	file << " *\n";
	file << " **/\n\n";
	file << "#pragma once\n\n";
	file << "namespace YAML {\n\n";

		/*
			template<>
			struct convert<micro_upoint> {
				static Node encode( const micro_upoint & rhs ) {
					Node node;
		
					node.push_back( rhs.x );
					node.push_back( rhs.y );
		
					return node;
				};

				static bool decode( const Node & node, micro_upoint & rhs ) {
					if ( !node.IsSequence( ) || node.size( ) != 2 )
						return false;

					rhs.x = node[ 0 ].as<micro_upoint::value_type>( );
					rhs.y = node[ 1 ].as<micro_upoint::value_type>( );

					return true;
				};

			};

			Emitter& operator<<( Emitter& out, const micro_vec4& value ) {
				out << YAML::Flow;
				out << YAML::BeginSeq << value.x << value.y << value.z << value.w << YAML::EndSeq;

				return out;
			};
		*/

	file << "\n};\n";

	file.close( );
}
